import java.util.*;
public class BSTAPNACOLLEGEYT{
    static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }

    public static void preorder(Node root){
        if(root==null)
        {
            return;
        }
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
    }

    public static void inorder(Node root){
        if(root==null)
        {
            System.out.print(-1+" ");
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }

    public static void postorder(Node root)
    {
        if(root==null)
        {
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data+" ");
    }

    public static void levelorder(Node root)
    {
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        q.add(null);
        while (!q.isEmpty())
        {
            Node curr=q.remove();
            if(curr==null)
            {
                System.out.println(" ");
                if(q.isEmpty())
                {
                    break;
                }
                else {
                    q.add(null);
                }
            }
            else {
                System.out.print(curr.data+" ");
                if(curr.left!=null)
                {
                    q.add(curr.left);
                }
                if(curr.right!=null)
                {
                    q.add(curr.right);
                }
            }
        }

    }

    public static int levelordersum(Node root,int level)
    {
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        q.add(null);
        int count=1,sum=0;
        while (!q.isEmpty())
        {
            Node curr=q.remove();
            if(curr==null)
            {
                count++;
                if(q.isEmpty() || count>level)
                {
                    break;
                }
                else
                {
                    q.add(null);
                }
            }
            else {
                if(count==level)
                {
                    sum+=curr.data;
                }
                if(curr.left!=null)
                {
                    q.add(curr.left);
                }
                if(curr.right!=null)
                {
                    q.add(curr.right);
                }
            }
        }
        return sum;
    }

    public static int height(Node root)
    {
        if(root==null)
        {
            return 0;
        }
        int leftheight=height(root.left);
        int rightheight=height(root.right);
        return Math.max(leftheight,rightheight)+1;
    }

    public static int count(Node root)
    {
        if(root==null)
        {
            return 0;
        }
        int leftnode=count(root.left);
        int rightnode=count(root.right);
        return leftnode+rightnode+1;
    }

    public static int sumOfNode(Node root)
    {
        if(root==null)
        {
            return 0;
        }
        int leftSum=sumOfNode(root.left);
        int rightSum=sumOfNode(root.right);
        return leftSum+rightSum+root.data;
    }

    public static int diameter1(Node root){
        if(root==null)
        {
            return 0;
        }
        int diam1=diameter1(root.left);
        int diam2=diameter1(root.right);
        int diam3=height(root.left)+height(root.right)+1;
        return Math.max(diam3,Math.max(diam2,diam1));
    } //O(n^2)

    static class treeInfo{
        int ht;
        int diam;
        treeInfo(int ht,int diam)
        {
            this.ht=ht;
            this.diam=diam;
        }
    }

    public static treeInfo diamter2(Node root)
    {
        if(root==null)
        {
            return new treeInfo(0,0);
        }
        treeInfo left=diamter2(root.left);
        treeInfo right=diamter2(root.right);
        int myheight=Math.max(left.ht,right.ht)+1;

        int diam1= left.ht+ right.ht+1;
        int diam2=left.diam;
        int diam3= right.diam;

        int mydiam=Math.max(diam3,Math.max(diam2,diam1));

        return new treeInfo(myheight,mydiam);
    }

    static class BinaryTree{
        static int idx=-1;
        public static Node buildTree(int nodes[]){
            idx++;
            if(nodes[idx]==-1){
                return null;
            }
            Node newnode=new Node(nodes[idx]);
            newnode.left=buildTree(nodes);
            newnode.right=buildTree(nodes);
            return newnode;
        }
    }

    public boolean isIdentical(Node root,Node subRoot)
    {
        if(subRoot==null && root==null)
        {
            return true;
        }
        if(root==null || subRoot==null)
        {
            return false;
        }
        if(root.data==subRoot.data)
        {
            return isIdentical(root.left,subRoot.left)&&isIdentical(root.right,subRoot.right);
        }
        return false;
    }

    public boolean isSubtree(Node root,Node subroot){
        if(subroot==null)
        {
            return true;
        }
        if(root==null)
        {
            return false;
        }
        if(isIdentical(root,subroot)){
            return true;
        }
        return isSubtree(root.left,subroot)||isSubtree(root.right,subroot);
    }


    public static void main(String[] args) {
        int nodes[]={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree tree=new BinaryTree();
        Node root= tree.buildTree(nodes);
        System.out.println(root.data);
        preorder(root);
        System.out.println(" ");
        inorder(root);
        System.out.println(" ");
        postorder(root);
        System.out.println(" ");
        levelorder(root);
        System.out.println(height(root));
        System.out.println(count(root));
        System.out.println(sumOfNode(root));
        System.out.println(diameter1(root));
        System.out.println(diamter2(root).diam);
        System.out.println("level order sum: "+levelordersum(root,3));
    }
}

